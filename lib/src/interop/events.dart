@JS()
library reactor.interop.events;

import 'package:js/js.dart';

typedef DomEventCallback(SyntheticEvent event);
typedef ClipboardEventCallback(SyntheticClipboardEvent event);
typedef KeyboardEventCallback(SyntheticKeyboardEvent event);
typedef FocusEventCallback(SyntheticFocusEvent event);
typedef FormEventCallback(SyntheticFormEvent event);
typedef PointerEventCallback(SyntheticPointerEvent event);
typedef MouseEventCallback(SyntheticMouseEvent event);
typedef TouchEventCallback(SyntheticTouchEvent event);
typedef UIEventCallback(SyntheticUIEvent event);
typedef WheelEventCallback(SyntheticWheelEvent event);

/// A cross-browser wrapper around the browser's [nativeEvent].
///
/// It has the same interface as the browser's native event, including [stopPropagation] and [preventDefault], except
/// the events work identically across all browsers.
///
/// See: <https://facebook.github.io/react/docs/events.html#syntheticevent>
@JS()
@anonymous
class SyntheticEvent {
  external factory SyntheticEvent({
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    num eventPhase,
    dynamic stopPropagation,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
  });

  /// call event.persist() on the event, If you want to access the event properties in an asynchronous way,
  /// this will remove the synthetic event from the pool and allow references to the event to be retained by user code.
  ///
  /// See: https://reactjs.org/docs/events.html#event-pooling
  external void persist();

  /// Indicates whether the [Event] bubbles up through the DOM or not.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles>
  external bool get bubbles;
  external set bubbles(bool v);

  /// Indicates whether the [Event] is cancelable or not.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable>
  external bool get cancelable;
  external set cancelable(bool v);

  /// Identifies the current target for the event, as the [Event] traverses the DOM.
  ///
  /// It always refers to the [Element] the [Event] handler has been attached to as opposed to [target] which identifies
  /// the [Element] on which the [Event] occurred.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget>
  external dynamic get /*DOMEventTarget*/ currentTarget;
  external set /*DOMEventTarget*/ currentTarget(dynamic v);

  // TODO: Add Documentation
  external bool isDefaultPrevented();

  /// Indicates whether or not [preventDefault] was called on the event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented>
  external bool get defaultPrevented;
  external set defaultPrevented(bool v);

  /// Cancels the [Event] if it is [cancelable], without stopping further propagation of the event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault>
  external void preventDefault();

  /// Prevents further propagation of the current event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation>
  external void stopPropagation();

  // TODO: Add Documentation
  external bool isPropagationStopped();

  /// Indicates which phase of the [Event] flow is currently being evaluated.
  ///
  /// Possible values:
  ///
  /// > [Event.CAPTURING_PHASE] (1) - The [Event] is being propagated through the [target]'s ancestor objects. This
  /// process starts with the Window, then [HtmlDocument], then the [HtmlHtmlElement], and so on through the [Element]s
  /// until the [target]'s parent is reached. Event listeners registered for capture mode when
  /// [EventTarget.addEventListener] was called are triggered during this phase.
  ///
  /// > [Event.AT_TARGET] (2) - The [Event] has arrived at the [target]. Event listeners registered for this phase are
  /// called at this time. If [bubbles] is `false`, processing the [Event] is finished after this phase is complete.
  ///
  /// > [Event.BUBBLING_PHASE] (3) - The [Event] is propagating back up through the [target]'s ancestors in reverse
  /// order, starting with the parent, and eventually reaching the containing Window. This is known as bubbling, and
  /// occurs only if [bubbles] is `true`. [Event] listeners registered for this phase are triggered during this process.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase>
  external num get eventPhase;

  /// Is `true` when the [Event] was generated by a user action, and `false` when the [Event] was created or modified
  /// by a script or dispatched via [Event.dispatchEvent].
  ///
  /// __Read Only__
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted>
  external bool get isTrusted;
  external set isTrusted(bool v);

  /// Native browser event that [SyntheticEvent] wraps around.
  external dynamic get /*DOMEvent*/ nativeEvent;
  external set /*DOMEvent*/ nativeEvent(dynamic v);

  /// A reference to the object that dispatched the event. It is different from [currentTarget] when the [Event]
  /// handler is called when [eventPhase] is [Event.BUBBLING_PHASE] or [Event.CAPTURING_PHASE].
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/target>
  external dynamic get /*DOMEventTarget*/ target;
  external set /*DOMEventTarget*/ target(dynamic v);

  /// Returns the [Time] (in milliseconds) at which the [Event] was created.
  ///
  /// _Starting with Chrome 49, returns a high-resolution monotonic time instead of epoch time._
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp>
  external num get timeStamp;
  external set timeStamp(num v);

  /// Returns a string containing the type of event. It is set when the [Event] is constructed and is the name commonly
  /// used to refer to the specific event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/type>
  external String get type;
  external set type(String v);
}

@JS()
@anonymous
abstract class SyntheticClipboardEvent extends SyntheticEvent {
  external get clipboardData;

  external factory SyntheticClipboardEvent({
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    clipboardData,
  });
}

@JS()
@anonymous
class SyntheticKeyboardEvent extends SyntheticEvent {
  external bool get altKey;
  external String get char;
  external bool get ctrlKey;
  external String get locale;
  external num get location;
  external String get key;
  external bool get metaKey;
  external bool get repeat;
  external bool get shiftKey;
  external num get keyCode;
  external num get charCode;

  external factory SyntheticKeyboardEvent({
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    bool altKey,
    String char,
    bool charCode,
    String ctrlKey,
    num locale,
    String location,
    bool key,
    bool keyCode,
    bool metaKey,
    num repeat,
    num shiftKey,
  });
}

@JS()
@anonymous
class SyntheticFocusEvent extends SyntheticEvent {
  external dynamic get /*DOMEventTarget*/ relatedTarget;

  external factory SyntheticFocusEvent({
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    dynamic relatedTarget,
  });
}

@JS()
@anonymous
class SyntheticFormEvent extends SyntheticEvent {
  external factory SyntheticFormEvent({
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
  });
}

@JS()
@anonymous
class SyntheticDataTransfer {
  external String get dropEffect;
  external String get effectAllowed;
  external List get files;
  external List<String> get types;

  external factory SyntheticDataTransfer({
    dropEffect,
    effectAllowed,
    files,
    types,
  });
}

@JS()
@anonymous
class SyntheticMouseEvent extends SyntheticEvent {
  external bool get altKey;
  external num get button;
  external num get buttons;
  external num get clientX;
  external num get clientY;
  external bool get ctrlKey;
  external SyntheticDataTransfer get dataTransfer;
  external bool get metaKey;
  external num get pageX;
  external num get pageY;
  external /*DOMEventTarget*/ get relatedTarget;
  external num get screenX;
  external num get screenY;
  external bool get shiftKey;

  external factory SyntheticMouseEvent({
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    altKey,
    button,
    buttons,
    clientX,
    clientY,
    ctrlKey,
    dataTransfer,
    metaKey,
    pageX,
    pageY,
    relatedTarget,
    screenX,
    screenY,
    shiftKey,
  });
}

@JS()
@anonymous
class SyntheticPointerEvent extends SyntheticEvent {
  external num get pointerId;
  external num get width;
  external num get height;
  external num get pressure;
  external num get tangentialPressure;
  external num get tiltX;
  external num get tiltY;
  external num get twist;
  external String get pointerType;
  external bool get isPrimary;

  external factory SyntheticPointerEvent({
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    pointerId,
    width,
    height,
    pressure,
    tangentialPressure,
    tiltX,
    tiltY,
    twist,
    pointerType,
    isPrimary,
  });
}

@JS()
@anonymous
class SyntheticTouchEvent extends SyntheticEvent {
  external bool get altKey;
  external /*DOMTouchList*/ get changedTouches;
  external bool get ctrlKey;
  external bool get metaKey;
  external bool get shiftKey;
  external /*DOMTouchList*/ get targetTouches;
  external /*DOMTouchList*/ get touches;

  external factory SyntheticTouchEvent({
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    altKey,
    changedTouches,
    ctrlKey,
    metaKey,
    shiftKey,
    targetTouches,
    touches,
  });
}

@JS()
@anonymous
class SyntheticUIEvent extends SyntheticEvent {
  external num get detail;
  external /*DOMAbstractView*/ get view;

  external factory SyntheticUIEvent({
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    detail,
    view,
  });
}

@JS()
@anonymous
class SyntheticWheelEvent extends SyntheticEvent {
  external num get deltaX;
  external num get deltaMode;
  external num get deltaY;
  external num get deltaZ;

  external factory SyntheticWheelEvent({
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    deltaX,
    deltaMode,
    deltaY,
    deltaZ,
  });
}
